# Web Scraping with Colly & Go

Daniel McMahon
April 2020

Software Engineer

Team Express | Pillar 2 - Profile & Personalisation | Digital Experience

daniel.mcmahon@zalando.ie



## Who am I?

Time @ Zalando

- 2017 - Intern / Team Wolves - FrontEnd R&D Work - React / JavaScript
- 2018 - Team Machina / Team ExMachina - APIs/Backend Webscraper - Scala/Akka/Play
- 2019 - Team ExMachina / Team Express - Kubernetes / Dev Ops / AWS
- 2020 - Team Express

Exposure to Golang

- Team Wolves Project - [Heimdall](linkneeded)
- Kubernetes - [k9s](https://github.com/derailed/k9s)
- Pet Projects - [Lucas](https://github.com/dan-mcm/lucas)

## Meet Lucas

.image images/lucas.png 400 600

- [Github Repo](https://github.com/dan-mcm/lucas)
- [Adorable Youtube Spider](https://www.youtube.com/user/joshuaslice)

## Packages Used

Scraping
- [Colly](https://github.com/gocolly/colly) - [Official Docs](http://go-colly.org/)

DB
- [pq](https://github.com/lib/pq) - [Official Docs](https://godoc.org/github.com/lib/pq)

Utils
- [Color](github.com/fatih/color) - [Official Docs](https://godoc.org/github.com/fatih/color)
- [GoDotEnv](https://github.com/joho/godotenv) - [Official Docs](https://godoc.org/github.com/joho/godotenv)

## The Reasoning

Getting spammed with adverts from [floryday](https://www.floryday.com/) despite never having heard of them.

Having previously worked on JS applications & some web scrapping with [Arachne]() I was curious to build something myself,
and what better way to get to know a new language then experimenting.

.image images/floryday.png 300 500

## Figuring out the Site Structure

- Initial Page Exploration

- Spotting URL Patterns with 'Dresses'
  - https://www.floryday.com/Dresses-r9872/
  - https://www.floryday.com/Dresses-r9872/p2/
  - https://www.floryday.com/Dresses-r9872/p5/

## Figuring out the HTML Structure

- Spotting HTML Patterns of PDPs

.image images/pdp1.png

## Figuring out the HTML Structure (cont'd)

- The 'valuable' data

.image images/pdp2.png

- Working on one product type as a basis but... logic could be abstracted to others

## Code Overview

Local DB Setup
- Postgres
- Docker

Main Package
- Lucas.go
- Models.go
- db.go

Env Variables
- .env

Dependencies:
- mod.go




## Next Steps

- Finish Parsing Data for 'dresses'
  - Add tests and handle errors
- Try a different product
  - Require new structs for each product type
  - Potential DB schema update
- Currently restricted in performance
  - Explore goroutines for parallelisation
  - Consider scheduling as cronjob to run regularly
- Could use DB data for visualisations & insights

Key focus: keep having fun while exploring Go!
