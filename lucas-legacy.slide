# Web Scraping with Colly & Go
Web Scraping with Colly & Go

Daniel McMahon

Software Engineer
Team Express | Pillar 2 - Profile & Personalisation | Digital Experience

April 2020

* Who am I?

Time @ Zalando

- 2017 - Intern / Team Wolves - FrontEnd R&D Work - React / JavaScript
- 2018 - Team Machina / Team ExMachina - APIs/Backend Webscraper - Scala/Akka/Play
- 2019 - Team ExMachina / Team Express - Kubernetes / Dev Ops / AWS
- 2020 - Team Express

* Exposure to Golang

- Team Wolves - [[https://github.bus.zalan.do/exmachina/heimdall][Heimdall]]
- Kubernetes - [[https://github.com/derailed/k9s][k9s]]
- Pet Projects - [[https://github.com/dan-mcm/lucas][Lucas]]

* Meet Lucas

.image images/lucas.png 400 600

- [[https://github.com/dan-mcm/lucas][Github Repo]]
- [[https://www.youtube.com/user/joshuaslice][Adorable Youtube Spider]]
- [[https://dev.to/dan_mcm_/lucas---a-webscraper-in-go-3jkc][Public Lucas Article]]

* Packages Used

Scraping
- [[https://github.com/gocolly/colly][Colly]] - [[http://go-colly.org/][Official Docs]]

DB
- [[https://github.com/lib/pq][pq]] - [[https://godoc.org/github.com/lib/pq][Official Docs]]

Utils
- [[https://github.com/fatih/color][Color]] - [[https://godoc.org/github.com/fatih/color][Official Docs]]
- [[https://github.com/joho/godotenv][GoDotEnv]] - [[https://godoc.org/github.com/joho/godotenv][Official Docs]]

* The Reasoning

Getting spammed with adverts from [[https://www.floryday.com/][floryday]] despite never having heard of them.

Having previously worked on JS applications & some web scrapping with [[https://github.bus.zalan.do/exmachina/arachne][Arachne]] I was curious to build something myself and what better way to get to know a new language then experimenting.

.image images/floryday.png 300 500

* Figuring out the Site Structure

- Initial Page Exploration

- Spotting URL Patterns with 'Dresses'
  - www.floryday.com/Dresses-r9872/
  - www.floryday.com/Dresses-r9872/p2/
  - www.floryday.com/Dresses-r9872/p5/

* Figuring out the HTML Structure

- Spotting HTML Patterns of PDPs

.image images/pdp1.png

* Figuring out the HTML Structure (cont'd)

- The 'valuable' data

.image images/pdp2.png

- Working on one product type as a basis but... logic could be abstracted to others

* Code Overview

Local DB Setup
- Postgres
- Docker

Main Package
- Lucas.go
- Models.go
- db.go

Env Variables
- .env

Dependencies:
- mod.go

* Next Steps

- Finish Parsing Data for 'dresses'
  - Add tests and handle errors
- Try a different product
  - Require new structs for each product type
  - Potential DB schema update
- Currently restricted in performance
  - Explore goroutines for parallelisation
  - Consider scheduling as cronjob to run regularly
- Could use DB data for visualisations & insights
